{
	"info": {
		"_postman_id": "50801c95-f9fb-4543-9198-c28c9c79cd6b",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18257953"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body containes string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/first",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json(); \r",
							"\r",
							"//4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Name is Elena\", function () {\r",
							"     pm.expect(jsonData.name).to.eql(\"Elena\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Age is 32\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Salary is 2000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"let salaryNumber = Number(req.salary) \r",
							"pm.test(\"Salary response = salary request\", function () {\r",
							"    pm.expect(salaryNumber).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = req.salary * 4\r",
							"pm.test(\"Salary_1_5 response = salary_1_5 request\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(jsonData.family.u_salary_1_5_year);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"//5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(query.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"let salaryNumber = String(jsonData.salary)\r",
							"pm.test(\"Salary in response = salary in request\", function () {\r",
							"    pm.expect(salaryNumber).to.eql(query.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog = jsonData.family.pets.dog\r",
							"pm.test(\"Dog containe name\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog containe age\", function () {\r",
							"    pm.expect(dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Elena&age=32&salary=2000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"//5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(query.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let ageNumber = Number(query.age)\r",
							"pm.test(\"Age in response = age in request\", function () {\r",
							"        pm.expect(jsonData.age).to.eql(ageNumber);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(query.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let salaryNumber = Number(query.salary)\r",
							"pm.test(\"Salary in response = salary in request\", function () {\r",
							"        pm.expect(jsonData.salary[0]).to.eql(salaryNumber);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_2 = query.salary * 2\r",
							"let salary_2String = String(salary_2)\r",
							"pm.test(\"Salary * 2 in response = salary * 2 in request\", function () {\r",
							"        pm.expect(jsonData.salary[1]).to.eql(salary_2String);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_3 = query.salary * 3\r",
							"let salary_3String = String(salary_3)\r",
							"pm.test(\"Salary * 3 in response = salary * 3 in request\", function () {\r",
							"        pm.expect(jsonData.salary[2]).to.eql(salary_3String);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//Environments => Create new environment => HW_2_Postman => add and save\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Elena&age=32&salary=2000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"// во вкладке body в значение value вставить  {{salary}}\r",
							"\r",
							"//2. Вставить параметр age из окружения в age\r",
							"// во вкладке body в значение value вставить  {{age}}\r",
							"\r",
							"//3. Вставить параметр name из окружения в name\r",
							"// во вкладке body в значение value вставить  {{name}}\r",
							"\r",
							"//4. Отправить запрос.\r",
							"\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let salaryString = String(jsonData.start_qa_salary)\r",
							"pm.test(\"response salary = request salary\", function () {\r",
							"        pm.expect(salaryString).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let salary_6_m = req.salary * 2\r",
							"pm.test(\"response qa_salary_after_6_months = request qa_salary_after_6_months\", function () {\r",
							"        pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary_6_m);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let salary_12_m = req.salary * 2.7\r",
							"pm.test(\"response qa_salary_after_12_months = request qa_salary_after_12_months\", function () {\r",
							"        pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary_12_m);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary_1_5_y = req.salary * 3.3\r",
							"pm.test(\"response qa_salary_after_1.5_year = request qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary_1_5_y);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary_3_5_y = req.salary * 3.8\r",
							"pm.test(\"response qa_salary_after_3.5_years = request qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary_3_5_y);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let salaryNumber = Number(req.salary)\r",
							"pm.test(\"response person salary = request salary\", function () {\r",
							"        pm.expect(jsonData.person.u_name[1]).to.eql(salaryNumber);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let ageNumber = Number(req.age)\r",
							"pm.test(\"response person age = request age\", function () {\r",
							"        pm.expect(jsonData.person.u_name[2]).to.eql(ageNumber);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let salary_5_y = req.salary * 4.2\r",
							"pm.test(\"response u_salary_5_years = request salary * 4.2\", function () {\r",
							"        pm.expect(jsonData.person.u_salary_5_years).to.eql(salary_5_y);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in jsonData.person) {\r",
							"    console.log(key + \": \" + jsonData.person[key]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_2",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}